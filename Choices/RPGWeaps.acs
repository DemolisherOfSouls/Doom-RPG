#library "RPGWeaps"

#include "zcommon.acs"

#import "RPGConst.acs"
#import "RPGIList.acs"
#import "RPGWList.acs"
#import "RPGSList.acs"
#import "RPGAFunc.acs"
#import "RPGIFunc.acs"
#import "RPGSFunc.acs"
#import "RPGWFunc.acs"
#import "RPGDraw.acs"

#define WD_FIST				0
#define WD_CHAINSAW			1
#define WD_PISTOL			2
#define WD_MKII				3
#define WD_SHOTGUN			4
#define WD_RIOTGUN			5
#define WD_STRIKER			6
#define WD_SUPERSHOTGUN		7
#define WD_CHAINGUN			8
#define WD_MINIGUN			9
#define WD_GRINDER			10
#define WD_ROCKET			11
#define WS_ROCKET			12
#define WR_ROCKET			13
#define WD_PLASMA			14
#define WS_PLASMA			15
#define WR_PLASMA			16
#define WD_HOTPLASMA		17
#define WD_BFG				18
#define WD_BFGRAY			19
#define WN_BFGRAY			20
#define WS_HOTPLASMA		21
#define WR_HOTPLASMA		22
#define WD_LASERRIFLE		23
#define WD_ASSAULTRIFLE		24
#define WD_RIFLE			25
#define WD_LIGHTMACHINEGUN	26

int ForbidWeaponPickup[8];

script "WeaponDamage" (int weapon)
{
	SetActivatorToTarget(0);
	
	int damage = 0;
	
	int pistol = GetSkill(SKILL_OldSchool) * 2;
	int shotgun = GetSkill(SKILL_OldSchool);
	int chaingun = GetSkill(SKILL_Heavy) + GetSkill(SKILL_Gunner) * 2 + GetSkill(SKILL_OldSchool);
	int plasma = GetSkill(SKILL_PlasmaSpaz) * 2;
	
	switch(weapon)
	{
	case WD_FIST:
		damage = 10;
		break;
	case WD_CHAINSAW:
		damage = 10;
		break;
	case WD_PISTOL:
		damage = 10 + pistol;
		break;
	case WD_MKII:
		damage = 8 + pistol;
		break;
	case WD_SHOTGUN:
		damage = 10 + shotgun;
		break;
	case WD_RIOTGUN:
		damage = 9 + shotgun;
		break;
	case WD_STRIKER:
		damage = 9 + shotgun;
		break;
	case WD_SUPERSHOTGUN:
		damage = 10;
		break;
	case WD_CHAINGUN:
		damage = 10 + chaingun;
		break;
	case WD_MINIGUN:
		damage = 10 + chaingun;
		break;
	case WD_GRINDER:
		damage = 18 + chaingun;
		break;
	case WD_ROCKET:
		damage = 80;
		break;
	case WS_ROCKET:
		damage = 128;
		break;
	case WR_ROCKET:
		damage = 128;
		break;
	case WD_PLASMA:
		damage = 20 + plasma;
		break;
	case WS_PLASMA:
		damage = 32 + plasma;
		break;
	case WR_PLASMA:
		damage = 32;
		break;
	case WD_HOTPLASMA:
		damage = 30 + plasma;
		break;
	case WD_BFG:
		damage = 400;
		break;
	case WD_BFGRAY:
		damage = 15;
		break;
	case WN_BFGRAY:
		damage = 40;
		break;
	case WS_HOTPLASMA:
		damage = 40 + plasma;
		break;
	case WR_HOTPLASMA:
		damage = 40;
		break;
	case WD_LASERRIFLE:
		damage = 16;
		break;
	case WD_ASSAULTRIFLE:
		damage = 12;
		break;
	case WD_RIFLE:
		damage = 15;
		break;
	case WD_LIGHTMACHINEGUN:
		damage = 16;
		break;
	}
	
	SetResultValue(damage);
}

script "WeaponAccuracy" (int type, int base)
{
	int acc = GetUserArray(0, "accuracy", type);
	SetResultValue(acc);
	
	if(type == WT_Chaingun)
		SetResultValue(base - acc);
}

script "WeaponPickup" (int type, int weapon, int mod)
{
	SetResultValue(false);
	
	int player = PlayerNumber();
	
	if(ForbidWeaponPickup[player] || GetActorPitch(0) < -0.0625)
		terminate;
	
	int currentweapon = GetWeaponVar(type);
	int currentmod = GetWeaponMod(type);

	if(currentweapon == NULL)
	{
		PickupWeapon(type, weapon, mod);
		SetResultValue(true);
	}
	else if(KeyExec(BT_USE))
	{
		ForbidWeaponPickup[player] = true;
		
		DropWeapon(type, currentweapon, currentmod);
		PickupWeapon(type, weapon, mod);
		SetResultValue(true);
		
		Delay(1);
		
		ForbidWeaponPickup[player] = false;
	}
	else if(currentweapon == weapon && mod == currentmod)
	{
		DrawWeaponHeldMessage(type, weapon, mod, currentmod);
	}
	else
	{
		DrawWeaponMessage(type, weapon, mod, currentweapon, currentmod);
	}
}

script "ChangeWeapon" (void)
{
	for(int w = 0; w < 10; w++)
	{
		int type = GetUserArray(0, "user_weaponorder", w);
		
		if(TryWeapon(type))
			terminate;
	}
}

script "GetKeyPress" (int input, int buttons)
{
	SetResultValue(GetPlayerInput(-1, input) & buttons);
}