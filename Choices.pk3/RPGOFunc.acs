#library "RPGOFunc"

#include "zcommon.acs"

#import "RPGConst.acs"
#import "RPGGVars.acs"
#import "RPGIVars.acs"
#import "RPGIList.acs"
#import "RPGOList.acs"
#import "RPGAFunc.acs"
#import "RPGColor.acs"
#import "RPGError.acs"

function int GetKeyMission (int LockNumber)
{
	if(WithinRange(LockNumber, KEY_REDCARD, KEY_YELLOWSKULL))
		return LockNumber;
	
	if(WithinRange(LockNumber, 129, 131))
		return LockNumber - 128 + 6;
	
	if(WithinRange(LockNumber, 132, 134))
		return LockNumber - 131 + 6;
	
	if(LockNumber == KEY_ANY)
		return MISSION_ANYKEY;
	
	if(LockNumber == KEY_EACH)
		return MISSION_EACHKEY;
		
	if(LockNumber == KEY_ALL)
		return MISSION_ALLKEYS;
	
	return EXCEPTION;
}

//Returns the LockNumber for the given mission, or EXCEPTION if the mission is not a key mission
function int GetLockNumber (int mission)
{
	if(WithinRange(mission, MISSION_REDCARD, MISSION_YELLOWSKULL))
		return mission;
	
	if(WithinRange(mission, MISSION_REDKEY, MISSION_YELLOWKEY))
		return 128 - 6 + mission;
	
	if(mission == MISSION_ANYKEY)
		return KEY_ANY;
	
	if(mission == MISSION_EACHKEY)
		return KEY_EACH;
		
	if(mission == MISSION_ALLKEYS)
		return KEY_ALL;
	
	return EXCEPTION;
}

//Returns true if the key mission is not active
function bool CheckKeyMission (int LockNumber)
{
	return GetMissionStatus(GetKeyMission(LockNumber), G_Map, NULL) < MISSION_GOT;
}

//Returns the next unused index (0-1023), or EXCEPTION if the list is full
function int GetNextMissionIndex (void)
{
	for(int c = 0; c < 1024; c++)
		if(GetUserArray(0, "user_m_status", c) == MISSION_NONE)
			return c;
	
	return EXCEPTION;
}

//Returns the index (0-1023) or EXCEPTION if the mission is not there
function int LookupMission (int mission, int map, int owner)
{
	for(int m = 0; m < 1024; m++)
	{
		if(GetUserArray(0, "user_m_status", m) == MISSION_NONE)
			break;
		
		if(mission != GetUserArray(0, "user_m_type", m))
			continue;
		if(map != GetUserArray(0, "user_m_map", m))
			continue;
		if(owner != GetUserArray(0, "user_m_owner", m))
			continue;
		
		return m;
	}
	
	return EXCEPTION;
}

function int GetMissionStatus (int MissionIndex)
{
	if(MissionIndex == EXCEPTION)
		return MISSION_NONE;
	
	return GetUserArray(0, "user_m_status", MissionIndex);
}

function void SetMissionStatus (int MissionIndex, int value)
{
	if(MissionIndex == EXCEPTION)
	{
		log(s:"Mission Status was not set. Use AddMission script instead.");
		return;
	}
	
	SetUserArray(0, "user_m_status", MissionIndex, value);
}

//Returns the next unused index (0-1023), or EXCEPTION if the list is full
function int GetNextObjectiveIndex (void)
{
	for(int c = 0; c < 2048; c++)
		if(GetUserArray(0, "user_o_status", c) == OBJECTIVE_NONE)
			return c;
	
	return EXCEPTION;
}

//Adds an objective from custom parameters
function void AddObjective (int MissionIndex, int map, int lookup, int type, int name, int desc, int icon,
							int data1, int data2, int data3, int data4, int data5, int data6, int data7)
{
	int index = GetNextObjectiveIndex();
	
	SetUserArray(0, "user_o_mission", index, MissionIndex);
	SetUserArray(0, "user_o_status", index, OBJECTIVE_GOT);
	SetUserArray(0, "user_o_map", index, map);
	SetUserArray(0, "user_o_lookup", index, lookup);
	
	SetUserArray(0, "user_o_type", index, ObjectiveData[lookup][OD_TYPE]);
	SetUserArray(0, "user_o_name", index, ObjectiveData[lookup][OD_NAMEINDEX]);
	SetUserArray(0, "user_o_desc", index, ObjectiveData[lookup][OD_DESCINDEX]);
	SetUserArray(0, "user_o_icon", index, ObjectiveData[lookup][OD_ICONINDEX]);
	SetUserArray(0, "user_o_data1", index, ObjectiveData[lookup][OD_DATA1]);
	SetUserArray(0, "user_o_data2", index, ObjectiveData[lookup][OD_DATA2]);
	SetUserArray(0, "user_o_data3", index, ObjectiveData[lookup][OD_DATA3]);
	SetUserArray(0, "user_o_data4", index, ObjectiveData[lookup][OD_DATA4]);
	SetUserArray(0, "user_o_data5", index, ObjectiveData[lookup][OD_DATA5]);
	SetUserArray(0, "user_o_data6", index, ObjectiveData[lookup][OD_DATA6]);
	SetUserArray(0, "user_o_data7", index, ObjectiveData[lookup][OD_DATA7]);
	
	ACS_NamedExecuteAlways("ObjectiveAlert", 0, index);
}

//Adds an objective from the lookup table
function void AddObjective (int MissionIndex, int map, int lookup)
{
	int index = GetNextObjectiveIndex();
	
	SetUserArray(0, "user_o_mission", index, MissionIndex);
	SetUserArray(0, "user_o_status", index, OBJECTIVE_GOT);
	SetUserArray(0, "user_o_map", index, map);
	SetUserArray(0, "user_o_lookup", index, lookup);
	
	SetUserArray(0, "user_o_type", index, ObjectiveData[lookup][OD_TYPE]);
	SetUserArray(0, "user_o_name", index, ObjectiveData[lookup][OD_NAMEINDEX]);
	SetUserArray(0, "user_o_desc", index, ObjectiveData[lookup][OD_DESCINDEX]);
	SetUserArray(0, "user_o_icon", index, ObjectiveData[lookup][OD_ICONINDEX]);
	SetUserArray(0, "user_o_data1", index, ObjectiveData[lookup][OD_DATA1]);
	SetUserArray(0, "user_o_data2", index, ObjectiveData[lookup][OD_DATA2]);
	SetUserArray(0, "user_o_data3", index, ObjectiveData[lookup][OD_DATA3]);
	SetUserArray(0, "user_o_data4", index, ObjectiveData[lookup][OD_DATA4]);
	SetUserArray(0, "user_o_data5", index, ObjectiveData[lookup][OD_DATA5]);
	SetUserArray(0, "user_o_data6", index, ObjectiveData[lookup][OD_DATA6]);
	SetUserArray(0, "user_o_data7", index, ObjectiveData[lookup][OD_DATA7]);
	
	ACS_NamedExecuteAlways("ObjectiveAlert", 0, index);
}

function int GetObjectiveStatus (int ObjectiveIndex)
{
	if(ObjectiveIndex == EXCEPTION)
		return OBJECTIVE_NONE;
	
	return GetUserArray(0, "user_o_status", ObjectiveIndex);
}

function void SetObjectiveStatus (int ObjectiveIndex, int value)
{
	if(ObjectiveIndex == EXCEPTION)
	{
		log(s:"Objective Status was not set. Use AddObjective script instead.");
		return;
	}
	
	SetUserArray(0, "user_o_status", ObjectiveIndex, value);
}