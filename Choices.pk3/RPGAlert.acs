#library "RPGAlert"

#include "zcommon.acs"

#import "RPGConst.acs"
#import "RPGGVars.acs"
#import "RPGSList.acs"
#import "RPGDList.acs"
#import "RPGIList.acs"
#import "RPGOList.acs"
#import "RPGAFunc.acs"
#import "RPGKFunc.acs"
#import "RPGSFunc.acs"
#import "RPGColor.acs"

#define ID_LEFT			0
#define ID_TOP			1
#define ID_BOTTOM		2
#define ID_CENTER		3

int AlertStatic[4] = { MSG_LEFT, MSG_TOP, MSG_BOTTOM, MSG_CENTER };		//Static fields for getting the message id
int AlertID[4];															//index of the next queued message
int AlertDisplay[4];													//index of the next displayed message
str AlertMessage[4][100];												//message that is queued

bool MW_Drop[4];														//message 'dropped' and timer is running
int  MW_Timer[4];														//tics passed since drop
int  MW_MsgTime[4] = { 50, 150, 150, 150 };								//Static fields for the timer stops

function void BasicAlert (int id, int x, int y, int alpha, str text)
{
	HudMessage(s:text; HUDMSG_PLAIN|HUDMSG_ALPHA, id, CR_UNTRANSLATED, x, y, 0, alpha);
}

function void PushMessage (int type, str text)
{
	AlertMessage[type][AlertID[type]] = text;
	
	if(AlertID[type] == 99)
		AlertID[type] = 0;
	else
		AlertID[type]++;
}

script "MessageWatchdog" Enter
{
	for(int q = 0; q < 4; q++)
	{
		if(MW_Timer[q] == MW_MsgTime[q] && MW_Drop[q])
		{
			MW_Drop[q] = false;
			if(AlertDisplay[q] == 99)
				AlertDisplay[q] = 0;
			else
				AlertDisplay[q]++;
		}
		if(AlertDisplay[q] != AlertID[q] && !MW_Drop[q])
		{
			ACS_NamedExecuteAlways("DropMessage", 0, q);
			
			MW_Drop[q] = true;
			MW_Timer[q] = 0;
		}
		
		if(MW_Drop[q])
			MW_Timer[q]++;
	}
	
	Delay(1);
	restart;
}

script "DropMessage" (int type)
{
	int x, y, t, c;
	bool move;
	
	int id = AlertDisplay[type] + AlertStatic[type];
	str msg = AlertMessage[type][AlertDisplay[type]];
	
	if(type != ID_LEFT) {
		x = HUD_FCENTERX;
		t = 70;
	} else {
		x = 40.0;
		t = 35;
		move = true;
	} if(type == ID_TOP || type == ID_BOTTOM) {
		SetFont("BIGFONT");
	} if(type == ID_TOP) {
		y = 64.0;
	} if(type == ID_BOTTOM) {
		y = 640.0;
	} if(type == ID_CENTER) {
		y = HUD_FCENTERY;
	}
	
	SetHUDSize(HUD_WIDTH, HUD_HEIGHT, true);

	for(c = 1; c < 36; c++)
	{
		if(move) y = 100.0 + I2F(c);
		BasicAlert(id, x, y, I2F(c) / 35, msg);
		Delay(1);
	}
	
	if(move) y = 135.0;
	BasicAlert(id, x, y, 1.0, msg);
	Delay(t);
	
	for(c = 35; c >= 0; c--)
	{
		if(move) y = 170.0 - I2F(c);
		BasicAlert(id, x, y, I2F(c) / 35, msg);
		Delay(1);
	}
}

#define A_EXP		0
#define A_RENOWN	1
#define A_SOULS		2
#define A_MONEY		3
#define A_AMMO		3 // Uses 4 - 7

int  Alert_Count[8][8];
bool Alert_Waiting[8][8];
str  Alert_ItemText[8][2] =
{
	{ " XP Awarded", " XP Awarded" },
	{ " Renown Awarded", " Renown Awarded" },
	{ " Soul Acquired", " Souls Acquired" },
	{ " Credit Acquired", " Credits Acquired" },
	{ " Bullet Acquired", " Bullets Acquired" },
	{ " Shell Acquired", " Shells Acquired" },
	{ " Rocket Acquired", " Rockets Acquired" },
	{ " Cell Acquired", " Cells Acquired" }
};

script "ExpAlert" (int amt)
{
	ACS_NamedExecuteAlways("StackableAlert", 0, amt, A_EXP, CR_BLUE);
}

script "RenownAlert" (int amt)
{
	ACS_NamedExecuteAlways("StackableAlert", 0, amt, A_RENOWN, CR_RED);
}

script "SoulAlert" (int amt)
{
	ACS_NamedExecuteAlways("StackableAlert", 0, amt, A_SOULS, CR_WHITE);
}

script "MoneyAlert" (int amt)
{
	ACS_NamedExecuteAlways("StackableAlert", 0, amt, A_MONEY, CR_YELLOW);
}

script "AmmoAlert" (int amt, int ammotype)
{
	ACS_NamedExecuteAlways("StackableAlert", 0, amt, A_AMMO + ammotype, CR_GREEN);
}

script "StackableAlert" (int amt, int type, int color)
{
	int player = PlayerNumber();
	
	Alert_Count[type][player] += amt;
	
	if(Alert_Waiting[type][player])
		terminate;
		
	int dif = AlertID[ID_LEFT] - AlertDisplay[ID_LEFT];		//Gets the 'line' to wait for the current message
	
	while( (dif > 1) || (dif < 0 && dif + 100 > 1) )
	{
		dif = AlertID[ID_LEFT] - AlertDisplay[ID_LEFT];		//Gets the 'line' to wait for the current message
		Alert_Waiting[type][player] = true;					//Set this alert type to 'waiting'
		Delay(1);
	}
	
	//Wait 1 tic to collect messages
	Delay(1);
	
	//Clear 'waiting' status
	Alert_Waiting[type][player] = false;
	
	//Assign text
	str text = SurroundNumber(CR(color), Alert_Count[type][player], Alert_ItemText[type][Alert_Count[type][player] > 1]);
	
	//Reset message data count
	Alert_Count[type][player] = 0;
	
	//Push message to screen
	PushMessage(ID_LEFT, text);
}

script "LevelAlert" (int levelups, int perks)
{
	str text = StrParam(s:"Level ", i:GetLevel());
	
	if(levelups > 1)
		text = StrParam(s:text, s:SurroundNumber("\n", levelups, " Levels Gained"));
	
	if(perks > 0)
		text = StrParam(s:text, s:"\n\c[Blue]A \c[Teal]perk\c[Blue] is available");
	
	PushMessage(ID_TOP, text);
}

script "MissionAlert" (int mission)
{
	str text = StrParam(s:"\c[red]Mission Started:\n\c[black]", s:MissionInfo[mission][MI_NAME]);
	PushMessage(ID_TOP, text);
}

script "MissionDoneAlert" (int mission)
{
	str text = StrParam(s:"\c[red]Mission Complete\n\c[black]", s:MissionInfo[mission][MI_NAME]);
	PushMessage(ID_TOP, text);
}

script "ObjectiveAlert" (int message)
{
	str text = StrParam(s:"\c[red]New Objective:\n\c[black]", s:message);
	PushMessage(ID_TOP, text);
}

script "ObjectiveDoneAlert" (void)
{
	str text = ForceColor(CR_RED, "Objective Complete");
	PushMessage(ID_TOP, text);
}

script "KeyAlert" (int keynum)
{
	str text = StrParam(s:GetKeyName(keynum), s:" acquired");
	PushMessage(ID_BOTTOM, text);
}

script "SkillAlert" (int skill, int amt)
{
	str text = StrParam(s:"Skill Learned: ", s:GetSkillName(skill), s:" ", s:PSurroundNumber(amt));
	PushMessage(ID_LEFT, text);
}

script "SkillChangeAlert" (int oldskill, int newskill)
{
	str text = StrParam(s:"Difficulty changed from ", s:DifficultyName[oldskill], s:" to ", s:DifficultyName[newskill]);
	PushMessage(ID_BOTTOM, text);
}

script "WrongPlayerAlert" (int text)
{
	PushMessage(ID_BOTTOM, text);
}

script "LevelGreetAlert" (void)
{
	str text = StrParam(s:CR(CR_BLACK), n:PRINTNAME_LEVEL, s:": \c[red]", n:PRINTNAME_LEVELNAME);
	PushMessage(ID_TOP, text);
}

int  HazardTimer  [3];
bool HazardVisible[3];

script "HazardAlert" (int image, int type)
{
	bool started = HazardTimer[type] > 0;
	
	HazardTimer[type] = 35;
	
	if(!started)
		ACS_NamedExecuteAlways("HazardLooper", 0, image, type);
}

script "HazardLooper" (int image, int type)
{
	while(HazardTimer[type] > 0)
	{
		HazardTimer[type] -= 7;
		HazardVisible[type] = !HazardVisible[type];
		
		if(HazardVisible[type])
		{
			//Draw...(image, id);
		}
		else
		{
			//ClearMessage(id);
		}
		
		Delay(7);
	}
}